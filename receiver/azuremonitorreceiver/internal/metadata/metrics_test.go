// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/confmap/confmaptest"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testConfigCollection int

const (
	testSetDefault testConfigCollection = iota
	testSetAll
	testSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name      string
		configSet testConfigCollection
	}{
		{
			name:      "default",
			configSet: testSetDefault,
		},
		{
			name:      "all_set",
			configSet: testSetAll,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings()
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadConfig(t, test.name), settings)

			expectedWarnings := 0
			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++

			var val1 float64 = 1
			attributes := map[string]*string{}
			mb.AddDataPoint("subId1", "resId1", "metric1", "count", "unit", attributes, ts, val1)

			metrics := mb.Emit(WithAzureMonitorTenantID("attr-val"))

			if test.configSet == testSetNone {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			attrVal, ok := rm.Resource().Attributes().Get("azuremonitor.tenant_id")
			assert.Equal(t, mb.resourceAttributesSettings.AzureMonitorTenantID.Enabled, ok)
			if mb.resourceAttributesSettings.AzureMonitorTenantID.Enabled {
				assert.EqualValues(t, "attr-val", attrVal.Str())
			}
			attrCount := rm.Resource().Attributes().Len()
			assert.Equal(t, 1, attrCount)

			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()

			attrVal, ok = ms.At(0).Gauge().DataPoints().At(0).Attributes().Get("azuremonitor.subscription_id")
			assert.Equal(t, mb.resourceAttributesSettings.AzureMonitorSubscriptionID.Enabled, ok)
			if mb.resourceAttributesSettings.AzureMonitorSubscriptionID.Enabled {
				assert.EqualValues(t, "subId1", attrVal.Str())
			}
			if test.configSet == testSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if test.configSet == testSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				}
			}
		})
	}
}

func loadConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, sub.Unmarshal(&cfg))
	return cfg
}
