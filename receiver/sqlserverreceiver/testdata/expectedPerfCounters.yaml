resourceMetrics:
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Total full scans per second.
            gauge:
              dataPoints:
                - asInt: 14458
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.full_scans
            unit: "{scans}/s"
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Number of execution errors.
            gauge:
              dataPoints:
                - asInt: 1048
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.execution_errors
            unit: “{errors}”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Total number of index searches.
            gauge:
              dataPoints:
                - asDouble: 1619118.000000
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.index_searches
            unit: “{index_searches}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Bytes received per second from a replica.
            gauge:
              dataPoints:
                - asDouble: 0.000000
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.replica_received
            unit: “{bytes}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Bytes sent per second to a replica.
            gauge:
              dataPoints:
                - asDouble: 0.000000
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.replica_sent
            unit: “{bytes}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Pages found in the buffer pool without having to read from disk.
            gauge:
              dataPoints:
                - asDouble: 100
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.page.buffer_cache.hit_ratio
            unit: '%'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Number of free list stalls per second.
            gauge:
              dataPoints:
                - asInt: 0
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.free_list_stalls
            unit: “{stalls}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Total number of page lookups.
            gauge:
              dataPoints:
                - asDouble: 3294704.000000
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name:  sqlserver.page_lookups
            unit: “{page_lookups}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Total number of mirror write transactions per second.
            gauge:
              dataPoints:
                - asDouble: 0.000000
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.mirror_write_transaction
            unit: “{mirror_write_transactions}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Time consumed in transaction delays.
            gauge:
              dataPoints:
                - asDouble: 0.000000
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.transaction_delays
            unit: ms
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: The number of backups/restores per second.
            gauge:
              dataPoints:
                - asInt: 0
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name:  sqlserver.backup_or_restore
            unit: “{backups_or_restores}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: The number of backups/restores per second.
            gauge:
              dataPoints:
                - asInt: 0
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name:  sqlserver.backup_or_restore
            unit: “{backups_or_restores}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: The number of backups/restores per second.
            gauge:
              dataPoints:
                - asInt: 0
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name:  sqlserver.backup_or_restore
            unit: “{backups_or_restores}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: The number of backups/restores per second.
            gauge:
              dataPoints:
                - asInt: 0
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name:  sqlserver.backup_or_restore
            unit: “{backups_or_restores}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: The number of backups/restores per second.
            gauge:
              dataPoints:
                - asInt: 0
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name:  sqlserver.backup_or_restore
            unit: “{backups_or_restores}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: The number of backups/restores per second.
            gauge:
              dataPoints:
                - asInt: 0
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name:  sqlserver.backup_or_restore
            unit: “{backups_or_restores}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: The number of backups/restores per second.
            gauge:
              dataPoints:
                - asInt: 0
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name:  sqlserver.backup_or_restore
            unit: “{backups_or_restores}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: The number of backups/restores per second.
            gauge:
              dataPoints:
                - asInt: 0
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name:  sqlserver.backup_or_restore
            unit: “{backups_or_restores}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: The number of active temporary tables.
            gauge:
              dataPoints:
                - asInt: 1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.active.temp.tables
            unit: “{temp_tables}”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Total number of logins per second.
            gauge:
              dataPoints:
                - asDouble: 333
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.logins
            unit: “{logins}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Total number of logouts per second.
            gauge:
              dataPoints:
                - asDouble: 330
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.logouts
            unit: “{logouts}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: The number of processes that are currently blocked
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.processes.blocked
            unit: '{processes}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Number of users connected to the SQL Server.
            gauge:
              dataPoints:
                - asInt: "3"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.user.connection.count
            unit: '{connections}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Total number of lock timeouts per second.
            gauge:
              dataPoints:
                - asDouble: 1.000000
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.lock_timeouts
            unit: “{lock_timeouts}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Number of lock requests resulting in a wait.
            gauge:
              dataPoints:
                - asDouble: 17
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.lock.wait.rate
            unit: '{requests}/s'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Total number of deadlocks per second.
            gauge:
              dataPoints:
                - asDouble: 0
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.deadlocks
            unit: “{deadlocks}/s”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Total number of memory grants pending.
            gauge:
              dataPoints:
                - asInt: 0
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.memory_grants_pending
            unit: “{memory_grants_pending}”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description:  Total used memory.
            gauge:
              dataPoints:
                - asDouble: 30960.000000
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.used_memory
            unit: “KB”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: The number of read operations that were throttled in the last second
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.resource_pool.disk.throttled.read.rate
            unit: '{reads}/s'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: The number of write operations that were throttled in the last second
            gauge:
              dataPoints:
                - asDouble: 0
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.resource_pool.disk.throttled.write.rate
            unit: '{writes}/s'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: The number of write operations that were throttled in the last second
            gauge:
              dataPoints:
                - asDouble: 0
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.resource_pool.disk.throttled.write.rate
            unit: '{writes}/s'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: The number of read operations that were throttled in the last second
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.resource_pool.disk.throttled.read.rate
            unit: '{reads}/s'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description:  Total used memory.
            gauge:
              dataPoints:
                - asDouble: 277608.000000
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.used_memory
            unit: “KB”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Number of batch requests received by SQL Server.
            gauge:
              dataPoints:
                - asDouble: 3375
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.batch.request.rate
            unit: '{requests}/s'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Number of SQL compilations needed.
            gauge:
              dataPoints:
                - asDouble: 413
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.batch.sql_compilation.rate
            unit: '{compilations}/s'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Number of SQL recompilations needed.
            gauge:
              dataPoints:
                - asDouble: 63
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.batch.sql_recompilation.rate
            unit: '{compilations}/s'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Total free space in temporary DB.
            gauge:
              dataPoints:
                - asInt: 61824
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.free_space_tempdb
            unit: “KB”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
  - resource:
      attributes:
        - key: sqlserver.instance.name
          value:
            stringValue: 8cac97ac9b8f
    scopeMetrics:
      - metrics:
          - description: Version store size.
            gauge:
              dataPoints:
                - asDouble: 0.0000
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: sqlserver.version_store_size
            unit: “KB”
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver
          version: latest
